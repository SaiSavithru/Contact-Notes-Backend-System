⚙️ Setup
1. Clone the repo (git clone https://github.com/SaiSavithru/Contact-Notes-Backend-System.git).
2. Install dependencies (npm install).
3. Change Database URL with local PostgreSQL URL.
4. Run in development mode (npm run dev).
5. To test each end point through Postman run 'npm run gen-token' and copy the JWT Auth token, and use it in Bearer Token Auth Type to make API calls.
6. Run Test Cases (npm run unit-tests / npm run integration-tests).


Key Decisions
1. All the contact-related APIs are mounted on /api/contacts and notes-related APIs are mounted on /api/notes at 3020 port.
2. API documentation through Swagger UI is available on /api-docs at 3020 port.
3. APIs may not be accessible via Browser, as it needs JWT Auth token. To access through browser comment lines 22, 23 and uncomment lines 25, 26 in app.js.
4. Implemented rate limiting middleware using the express-rate-limit library to restrict clients to a maximum of 100 requests per minute
5. To simulate outbound requests to other services, mocked an external service on port 4001 which is available at /external-data, and requires JWT token to access it. 
   When client requests at /api/external-service on the main app (availabale at 3020 port), it reached out to external service at /external-data,
   however it requires a JWT Auth token, which gets autoomatically generated by making a GET request to http://localhost:4001/auth/token.
   There after, a new token is automatically generated after every 10 seconds (expiry time).
6. Implelemted timeouts (5 secs/5000 ms) for all APIs on /api/contacts and /api/notes.
7. Handled event-driven workflows through Kafka, whcih produces an event every time a note is updated/created.
   It can help decoupling the side effects (like sending notifications, updating analytics, syncing with other services, etc.) from your core business logic by emitting events and let other microservices react independently.
   To consume/listen to events -> kafka-console-consumer.bat --topic notes-events --from-beginning --bootstrap-server localhost:9092
8. Implemented field normalization for inbound note data (POST on /api/contacts/{contactId}/notes), it requires JSON object with key as "body" or "note_text" or "note_body"
   and with value as note to create.
9. Implemented Retry with Backoff with a max retires of 5, and a backoff that increases exponentially (1, 2, 4, 8, 16 secs) for Kafka produce event.
   So if an event consumer fails, Kafka can retain messages and allow reprocessing later
10. Simulated JWT Token generation and expiration automatically for outbound reusts to external service /api/external-service on port 4001.
   A new token is automatically generated for every 10 seconds.


Assumptions
1. Path params passed on to APIs are integers, not strings (E.g: api/contacts/3, api/contacts/3/notes/1).
2. For POST on /api/contacts/{contactId}/notes, it requires json object with key "body" or "note_text" or "note_body" for notes to be created.
3. On deleting a contact, it deletes all relted notes too (Cascade Delete)


Improvements (To add with more time)
1. Add Pagination & Filtering
For GET /api/contacts and GET /api/contacts/:id/notes, to prevent large data overload and improve client-side performance with support query params like ?page=1&limit=10
2. Add Sorting
Allow sorting notes by date (createdAt, updatedAt) or alphabetically with ?sort=createdAt&order=desc
3. Role-Based Access Control (RBAC)
Differentiate permissions: e.g., admins can see all contacts, users can only access their own


API documentation
1. GET /api/contacts
Description: Get a list of all contacts (requires JWT authentication)
Responses:
    200 : Fetched Successfully
    401 : Unauthorized - JWT token missing or invalid
    500 : Internal Server Error (Failed to get all contacts)

2. POST /api/contacts
Description: Create a new contact with name and email (requires JWT authentication)
Request Body Example:
    {
        "name": "User 1",
        "email": "user1@test.com"
    }
Responses:
    201 : Contact created successfully
    400 : Bad Request (name and email are required)
    401 : Unauthorized - JWT token missing or invalid
    409 : Conflict - Email already exists
    500 : Internal Server Error (Failed to create contact)

3. GET /api/contacts/{contactId}
Description: Retrieve a specific contact by its ID (requires JWT authentication)
Responses:
    200 : Successfully retrieved contact
    401 : Unauthorized - JWT token missing or invalid
    404 : Contact not found
    500 : Internal Server Error (Failed to get contact)

4. PUT /api/contacts/{contactId}
Description: Update an existing contact's name and/or email (requires JWT authentication)
Request Body Examples:
    {
        "name": "User One",
        "email": "userOne@test.com"
    }
    or
    {
        "name": "User One",
    }
    or
    {
        "email": "userOne@test.com"
    }
Responses:
    200 : Contact updated successfully
    400 : No fields provided for update
    401 : Unauthorized - JWT token missing or invalid
    404 : Contact not found
    409 : Conflict - Email already exists
    500 : Internal Server Error (Failed to update contact)

5. DELETE /api/contacts/{contactId}
Description: Delete a contact by its ID (requires JWT authentication)
Responses:
    204 : Contact deleted successfully
    401 : Unauthorized - JWT token missing or invalid
    404 : Contact not found
    500 : Internal Server Error (Failed to delete contact)

6. GET /api/contacts/{contactId}/notes
Description: Retrieve all notes for a contact (requires JWT authentication)
Responses:
    200 : Fetched Successfully
    401 : Unauthorized - JWT token missing or invalid
    404 : Contact/Notes not found
    500 : Internal Server Error (Failed to get all notes for a contact)

7. POST /api/contacts/{contactId}/notes
Description: Create a new note for a contact (requires JWT authentication)
Request Body Example:
    {
        "note_text": "This is my note"
    }
    or
    {
        "note_body": "This is my note"
    }
    or
    {
        "body": "This is my note"
    }
Responses:
    201 : Note created successfully
    400 : Bad Request (note_text/note_body/body is required)
    401 : Unauthorized - JWT token missing or invalid
    404 : Contact not found
    500 : Internal Server Error (Failed to create note)

8.  GET /api/contacts/{contactId}/notes/{noteId}
Description: Retrieve a specific note by its ID (requires JWT authentication)
Responses:
    200 : Note fetched Successfully
    401 : Unauthorized - JWT token missing or invalid
    404 : Contact/Note not found
    500 : Internal Server Error (Failed to get note)

9.  PUT /api/contacts/{contactId}/notes/{noteId}
Description: Update an existing note by its ID (requires JWT authentication)
Request Body Example:
    {
        "note_text": "This is my updated note"
    }
Responses:
    200 : Note updated successfully
    400 : Note Text is required to update
    401 : Unauthorized - JWT token missing or invalid
    404 : Contact/Note not found
    500 : Internal Server Error (Failed to update note)

10.  DELETE /api/contacts/{contactId}/notes/{noteId}
Description: Delete a note by its ID (requires JWT authentication)
Responses:
    204 : Note deleted successfully
    401 : Unauthorized – JWT token missing or invalid
    404 : Contact/Note not found
    500 : Internal Server Error (Failed to delete note)

11. GET /api-docs
Description: To access API documentation using Swagger UI

12 GET /api/external-service
Description: To Simulate the process of automatic token generation on expiry for requetsts to external services
